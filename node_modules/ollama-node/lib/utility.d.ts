/// <reference types="node" />
import { RequestOptions } from 'http';
export type FinalOutput = {
    messages: {}[];
    final: {};
};
export type GenerateMessage = {
    model: string;
    created_at: string;
    response: string;
    done: boolean;
};
export type GenerateComplete = {
    model: string;
    created_at: string;
    done: boolean;
    context: number[];
    total_duration: number;
    load_duration: number;
    prompt_eval_count: number;
    prompt_eval_duration: number;
    eval_count: number;
    eval_duration: number;
};
interface Options {
    seed?: number;
    numa?: boolean;
    useNUMA?: boolean;
    numCtx?: number;
    numKeep?: number;
    numBatch?: number;
    numGQA?: number;
    numGPU?: number;
    mainGPU?: number;
    lowVRAM?: boolean;
    f16KV?: boolean;
    logitsAll?: boolean;
    vocabOnly?: boolean;
    useMMap?: boolean;
    useMLock?: boolean;
    embeddingOnly?: boolean;
    ropeFrequencyBase?: number;
    ropeFrequencyScale?: number;
    numPredict?: number;
    topK?: number;
    topP?: number;
    tfsZ?: number;
    typicalP?: number;
    repeatLastN?: number;
    temperature?: number;
    repeatPenalty?: number;
    presencePenalty?: number;
    frequencyPenalty?: number;
    mirostat?: number;
    mirostatTau?: number;
    mirostatEta?: number;
    penalizeNewline?: boolean;
    stop?: string[];
    numThread?: number;
}
type PostTarget = 'generate' | 'create' | 'delete' | 'pull' | 'push' | 'copy' | 'embed';
type PostInput<T> = T extends 'generate' ? {
    model: string;
    prompt: string;
    system: string;
    template: string;
    options: Options;
    context: number[];
} : T extends 'create' ? {
    name: string;
    path: string;
} : T extends 'delete' ? {
    name: string;
} : T extends 'pull' ? {
    name: string;
} : T extends 'push' ? {
    name: string;
} : T extends 'copy' ? {
    source: string;
    destination: string;
} : T extends 'embed' ? {
    model: string;
    prompt: string;
} : never;
export declare function requestList(options: RequestOptions): Promise<unknown>;
export declare function requestShowInfo(options: RequestOptions, model: string): Promise<unknown>;
export declare function requestDelete(options: RequestOptions, model: string): Promise<unknown>;
export declare function requestPost<P extends PostTarget>(target: P, options: RequestOptions, databody: PostInput<P>): Promise<FinalOutput>;
export declare function streamingPost<P extends PostTarget>(target: P, options: RequestOptions, databody: PostInput<P>, callback: (chunk: any) => void): void;
export {};
