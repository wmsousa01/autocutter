interface Options {
    [key: string]: any;
}
type CallbackFunction = (chunk: any) => void;
export type ModelList = {
    name: string;
    modified_at: string;
    size: number;
    digest: string;
};
export type GenerateFinalOutput = {
    model: string;
    created_at: string;
    done: boolean;
    context: number[];
    total_duration: number;
    load_duration: number;
    prompt_eval_count: number;
    prompt_eval_duration: number;
    eval_count: number;
    eval_duration: number;
};
export declare class Ollama {
    protected Host: string;
    private Port;
    private Model;
    private SystemPrompt;
    private Template;
    private Parameters;
    private Context;
    private JSONFormat;
    constructor();
    constructor(ollamaHost: string);
    private numberIfNumber;
    private parseParams;
    localModelExists(model: string): Promise<boolean>;
    setContext(context: number[]): void;
    showHost(): string;
    setJSONFormat(useJSON: boolean): void;
    setModel(model: string): Promise<void>;
    setTemplate(template: string): void;
    setSystemPrompt(systemPrompt: string): void;
    addParameter(name: string, value: any): void;
    deleteParameter(name: string, value: string): void;
    deleteParameterByName(name: string): void;
    deleteAllParameters(): void;
    showParameters(): Options;
    showSystemPrompt(): Promise<string>;
    showTemplate(): string;
    showModel(): string;
    private showModelInfo;
    listModels(): Promise<{
        models: string[];
        complete: ModelList[];
    }>;
    generate(prompt: string): Promise<{
        output: any;
        stats: any;
    }>;
    streamingGenerate(prompt: string, responseOutput?: CallbackFunction | null, contextOutput?: CallbackFunction | null, fullResponseOutput?: CallbackFunction | null, statsOutput?: CallbackFunction | null): Promise<void>;
    create(modelName: string, modelPath: string): Promise<string[]>;
    generateEmbed(modelName: string, input: string): Promise<number[]>;
    streamingCreate(modelName: string, modelPath: string, responseOutput?: CallbackFunction | null): Promise<void>;
    streamingPull(modelName: string, responseOutput?: CallbackFunction | null): Promise<void>;
    streamingPush(modelName: string, responseOutput?: CallbackFunction | null): Promise<void>;
    copy(sourceName: string, destinationName: string): Promise<never>;
    cbPrintword(chunk: any): void;
    cbPrintLine(chunk: any): void;
}
export {};
